//--------------------------------------------------------------------------------
//--
//-- This file is owned and controlled by Xilinx and must be used solely
//-- for design, simulation, implementation and creation of design files
//-- limited to Xilinx devices or technologies. Use with non-Xilinx
//-- devices or technologies is expressly prohibited and immediately
//-- terminates your license.
//--
//-- Xilinx products are not intended for use in life support
//-- appliances, devices, or systems. Use in such applications is
//-- expressly prohibited.
//--
//--            **************************************
//--            ** Copyright (C) 2005, Xilinx, Inc. **
//--            ** All Rights Reserved.             **
//--            **************************************
//--
//--------------------------------------------------------------------------------
//-- Filename: BMD_64_TX_ENGINE.v
//--
//-- Description: 64 bit Local-Link Transmit Unit.
//--
//--------------------------------------------------------------------------------

`timescale 1ns/1ns

`define BMD_64_CPLD_FMT_TYPE   7'b10_01010
`define BMD_64_MWR_FMT_TYPE    7'b10_00000
`define BMD_64_MWR64_FMT_TYPE  7'b11_00000
`define BMD_64_MRD_FMT_TYPE    7'b00_00000
`define BMD_64_MRD64_FMT_TYPE  7'b01_00000

`define BMD_64_TX_RST_STATE    8'b00000001      //8'h01
`define BMD_64_TX_CPLD_QW1     8'b00000010      //8'h02
`define BMD_64_TX_CPLD_WIT     8'b00000100      //8'h04
`define BMD_64_TX_MWR_QW1      8'b00001000      //8'h08
`define BMD_64_TX_MWR64_QW1    8'b00010000      //8'h10
`define BMD_64_TX_MWR_QWN      8'b00100000      //8'h20 
`define BMD_64_TX_MRD_QW1      8'b01000000			//8'h40
`define BMD_64_TX_MRD_QWN      8'b10000000			//8'h80

module BMD_64_TX_ENGINE (

                        clk,
                        rst_n,

                        trn_td,
                        trn_trem_n,
                        trn_tsof_n,
                        trn_teof_n,
                        trn_tsrc_rdy_n,
                        trn_tsrc_dsc_n,
                        trn_tdst_rdy_n,
                        trn_tdst_dsc_n,
                        trn_tbuf_av,

                        req_compl_i,    
                        compl_done_o,  

                        req_tc_i,     
                        req_td_i,    
                        req_ep_i,   
                        req_attr_i,
                        req_len_i,         
                        req_rid_i,        
                        req_tag_i,       
                        req_be_i,
                        req_addr_i,     

                        // BMD Read Access

                        rd_addr_o,   
                        rd_be_o,    
                        rd_data_i,
												//FIFO接口
												fifo_tx_data,             //用户端有效数据
                        fifo_tx_data_valid,          //用户端有效数据使能
                        fifo_tx_data_rd_en,
                        trn_trem_en,

                        // Initiator Reset
          
                        init_rst_i,

                        // Write Initiator

                        mwr_start_i,
                        mwr_int_dis_i,
                        mwr_len_i,
                        mwr_tag_i,
                        mwr_lbe_i,
                        mwr_fbe_i,
                        mwr_addr_i,
                        mwr_data_i,
                        mwr_count_i,
                        mwr_done_o,
                        mwr_tlp_tc_i,
                        mwr_64b_en_i,
                        mwr_phant_func_dis1_i,
                        mwr_up_addr_i,
                        mwr_relaxed_order_i,
                        mwr_nosnoop_i,
                        mwr_wrr_cnt_i,

                        // Read Initiator

                        mrd_start_i,
                        mrd_int_dis_i,
                        mrd_len_i,
                        mrd_tag_i,
                        mrd_lbe_i,
                        mrd_fbe_i,
                        mrd_addr_i,
                        mrd_count_i,
                        mrd_done_i,
                        mrd_tlp_tc_i,
                        mrd_64b_en_i,
                        mrd_phant_func_dis1_i,
                        mrd_up_addr_i,
                        mrd_relaxed_order_i,
                        mrd_nosnoop_i,
                        mrd_wrr_cnt_i,

                        cur_mrd_count_o,

                        cfg_msi_enable_i,
                        cfg_interrupt_n_o,
                        cfg_interrupt_assert_n_o,
                        cfg_interrupt_rdy_n_i,
                        cfg_interrupt_legacyclr,

                        completer_id_i,
                        cfg_ext_tag_en_i,
                        cfg_bus_mstr_enable_i,
                        cfg_phant_func_en_i,
                        cfg_phant_func_supported_i


                        );

    input               clk;
    input               rst_n;
    
    input fifo_tx_data_valid;    
    input [63:0] fifo_tx_data;
    output fifo_tx_data_rd_en;
    output trn_trem_en;
 
    output [63:0]       trn_td;
    //output [7:0]        trn_trem_n;    //不对，修改
    output [0:0]        trn_trem_n;     //trn_trem_n=1'b1,tkeep=8'hFF,tkeep=8'h0F
    output              trn_tsof_n;
    output              trn_teof_n;
    output              trn_tsrc_rdy_n;
    output              trn_tsrc_dsc_n;
    input               trn_tdst_rdy_n;
    input               trn_tdst_dsc_n;
    input [5:0]         trn_tbuf_av;

    input               req_compl_i;
    output              compl_done_o;

    input [2:0]         req_tc_i;
    input               req_td_i;
    input               req_ep_i;
    input [1:0]         req_attr_i;
    input [9:0]         req_len_i;
    input [15:0]        req_rid_i;
    input [7:0]         req_tag_i;
    input [7:0]         req_be_i;
    //input [10:0]        req_addr_i;
    input [11:0]        req_addr_i;
    
    output [6:0]        rd_addr_o;
    output [3:0]        rd_be_o;
    input  [31:0]       rd_data_i;

    input               init_rst_i;

    input               mwr_start_i;
    input               mwr_int_dis_i;
    input  [31:0]       mwr_len_i;
    input  [7:0]        mwr_tag_i;
    input  [3:0]        mwr_lbe_i;
    input  [3:0]        mwr_fbe_i;
    input  [31:0]       mwr_addr_i;
    input  [31:0]       mwr_data_i;
    input  [31:0]       mwr_count_i;
    output              mwr_done_o;
    input  [2:0]        mwr_tlp_tc_i;
    input               mwr_64b_en_i;
    input               mwr_phant_func_dis1_i;
    input  [7:0]        mwr_up_addr_i;
    input               mwr_relaxed_order_i;
    input               mwr_nosnoop_i;
    input  [7:0]        mwr_wrr_cnt_i;


    input               mrd_start_i;
    input               mrd_int_dis_i;
    input  [31:0]       mrd_len_i;
    input  [7:0]        mrd_tag_i;
    input  [3:0]        mrd_lbe_i;
    input  [3:0]        mrd_fbe_i;
    input  [31:0]       mrd_addr_i;
    input  [31:0]       mrd_count_i;
    input               mrd_done_i;
    input  [2:0]        mrd_tlp_tc_i;
    input               mrd_64b_en_i;
    input               mrd_phant_func_dis1_i;
    input  [7:0]        mrd_up_addr_i;
    input               mrd_relaxed_order_i;
    input               mrd_nosnoop_i;
    input  [7:0]        mrd_wrr_cnt_i;

    output [15:0]       cur_mrd_count_o;

    input               cfg_msi_enable_i;
    output              cfg_interrupt_n_o;
    output              cfg_interrupt_assert_n_o;
    input               cfg_interrupt_rdy_n_i;
    input               cfg_interrupt_legacyclr;

    input [15:0]        completer_id_i;
    input               cfg_ext_tag_en_i;
    input               cfg_bus_mstr_enable_i;

    input               cfg_phant_func_en_i;
    input [1:0]         cfg_phant_func_supported_i;


    // Local registers
    reg fifo_tx_data_rd_en; 
    reg payload_valid; 
    reg trn_trem_en;         
    reg [63:0]          trn_td;
    //reg [7:0]           trn_trem_n;    //修改，不对
    reg [0:0]           trn_trem_n;       
    reg                 trn_tsof_n;
    reg                 trn_teof_n;
    reg                 trn_tsrc_rdy_n;
    reg                 trn_tsrc_dsc_n;
 
    reg [11:0]          byte_count;
    //reg [7:0]          byte_count;
    reg [06:0]          lower_addr;
    //reg [07:0]          lower_addr; 
    //reg [13:0]          lower_addr;

    reg                 req_compl_q;                 

    reg [7:0]           bmd_64_tx_state;

    reg                 compl_done_o;
    reg                 mwr_done_o;

    reg                 mrd_done;

    reg [15:0]          cur_wr_count;
    reg [15:0]          cur_rd_count;
   
    reg [9:0]           cur_mwr_dw_count;
  
    reg [12:0]          mwr_len_byte;
    reg [12:0]          mrd_len_byte;

    reg [31:0]          pmwr_addr;
    reg [31:0]          pmrd_addr;

    reg [31:0]          tmwr_addr;
    reg [31:0]          tmrd_addr;

    reg [15:0]          rmwr_count;
    reg [15:0]          rmrd_count;

    reg                 serv_mwr;
    reg                 serv_mrd;

    reg  [7:0]          tmwr_wrr_cnt;
    reg  [7:0]          tmrd_wrr_cnt;

    // Local wires
   
    wire [15:0]         cur_mrd_count_o = cur_rd_count;
    wire                cfg_bm_en = cfg_bus_mstr_enable_i;
    wire [31:0]         mwr_addr  = mwr_addr_i;
    wire [31:0]         mrd_addr  = mrd_addr_i;
    wire [31:0]         mwr_data_i_sw = {mwr_data_i[07:00],
                                         mwr_data_i[15:08],
                                         mwr_data_i[23:16],
                                         mwr_data_i[31:24]};

    wire  [2:0]         mwr_func_num = (!mwr_phant_func_dis1_i && cfg_phant_func_en_i) ? 
                                       ((cfg_phant_func_supported_i == 2'b00) ? 3'b000 : 
                                        (cfg_phant_func_supported_i == 2'b01) ? {cur_wr_count[8], 2'b00} : 
                                        (cfg_phant_func_supported_i == 2'b10) ? {cur_wr_count[9:8], 1'b0} : 
                                        (cfg_phant_func_supported_i == 2'b11) ? {cur_wr_count[10:8]} : 3'b000) : 3'b000;

    wire  [2:0]         mrd_func_num = (!mrd_phant_func_dis1_i && cfg_phant_func_en_i) ? 
                                       ((cfg_phant_func_supported_i == 2'b00) ? 3'b000 : 
                                        (cfg_phant_func_supported_i == 2'b01) ? {cur_rd_count[8], 2'b00} : 
                                        (cfg_phant_func_supported_i == 2'b10) ? {cur_rd_count[9:8], 1'b0} : 
                                        (cfg_phant_func_supported_i == 2'b11) ? {cur_rd_count[10:8]} : 3'b000) : 3'b000;

    /*
     * Present address and byte enable to memory module
     */

    assign rd_addr_o = req_addr_i[10:2];
    assign rd_be_o =   req_be_i[3:0];

    /*
     * Calculate byte count based on byte enable
     */

    always @ (rd_be_o) begin

      casex (rd_be_o[3:0])
      
        4'b1xx1 : byte_count = 12'h004;     //仅有1111
        4'b01x1 : byte_count = 12'h003;     //有0111
        4'b1x10 : byte_count = 12'h003;			//有1110			
        4'b0011 : byte_count = 12'h002;
        4'b0110 : byte_count = 12'h002;
        4'b1100 : byte_count = 12'h002;
        4'b0001 : byte_count = 12'h001;
        4'b0010 : byte_count = 12'h001;
        4'b0100 : byte_count = 12'h001;
        4'b1000 : byte_count = 12'h001;
        4'b0000 : byte_count = 12'h001;

      endcase

    end

    /*
     * Calculate lower address based on  byte enable
     */

    always @ (rd_be_o or req_addr_i) begin

      casex (rd_be_o[3:0])
      
        4'b0000 : lower_addr = {req_addr_i[4:0], 2'b00};
        4'bxxx1 : lower_addr = {req_addr_i[4:0], 2'b00};
        4'bxx10 : lower_addr = {req_addr_i[4:0], 2'b01};
        4'bx100 : lower_addr = {req_addr_i[4:0], 2'b10};
        4'b1000 : lower_addr = {req_addr_i[4:0], 2'b11}; 
        //4'b0000 : lower_addr = {req_addr_i[11:0], 2'b00};      
        //4'bxxx1 : lower_addr = {req_addr_i[11:0], 2'b00};     //一般情况下，肯定是这种，PIO模式这个DW全部有效，rd_be_o
        //4'bxx10 : lower_addr = {req_addr_i[11:0], 2'b01};
        //4'bx100 : lower_addr = {req_addr_i[11:0], 2'b10};
        //4'b1000 : lower_addr = {req_addr_i[11:0], 2'b11};
        

      endcase

    end

    always @ ( posedge clk ) begin

        if (!rst_n ) begin

          req_compl_q <= 1'b0;

        end else begin 

          req_compl_q <= req_compl_i;

        end

    end

    /*
     *  Interrupt Controller
     */

    BMD_INTR_CTRL BMD_INTR_CTRL  (

      .clk(clk),                                     // I
      .rst_n(rst_n),                                 // I

      .init_rst_i(init_rst_i),                       // I

      .mrd_done_i(mrd_done_i & !mrd_int_dis_i),      // I
      .mwr_done_i(mwr_done_o & !mwr_int_dis_i),      // I

      .msi_on(cfg_msi_enable_i),                     // I

      .cfg_interrupt_rdy_n_i(cfg_interrupt_rdy_n_i), // I
      .cfg_interrupt_assert_n_o(cfg_interrupt_assert_n_o), // O
      .cfg_interrupt_n_o(cfg_interrupt_n_o),        // O
      .cfg_interrupt_legacyclr(cfg_interrupt_legacyclr) // I

    );


    /*
     *  Tx State Machine 
     */

    always @ ( posedge clk ) begin

        if (!rst_n ) begin

          trn_tsof_n        <= 1'b1;
          trn_teof_n        <= 1'b1;
          trn_tsrc_rdy_n    <= 1'b1;
          trn_tsrc_dsc_n    <= 1'b1;
          trn_td            <= 64'b0;
          //trn_trem_n        <= 8'b0;
          trn_trem_n        <= 1'b1;  
          
          fifo_tx_data_rd_en <= 1'b0;
          payload_valid <= 1'b0;
          
          trn_trem_en <= 1'b0;
          
 
          cur_mwr_dw_count  <= 10'b0;

          compl_done_o      <= 1'b0;
          mwr_done_o        <= 1'b0;

          mrd_done          <= 1'b0;

          cur_wr_count      <= 16'b0;
          cur_rd_count      <= 16'b1;

          mwr_len_byte      <= 13'b0;
          mrd_len_byte      <= 13'b0;

          pmwr_addr         <= 32'b0;
          pmrd_addr         <= 32'b0;

          rmwr_count        <= 16'b0;
          rmrd_count        <= 16'b0;

          serv_mwr          <= 1'b1;
          serv_mrd          <= 1'b1;

          tmwr_wrr_cnt      <= 8'h00;
          tmrd_wrr_cnt      <= 8'h00;

          bmd_64_tx_state   <= `BMD_64_TX_RST_STATE;

        end else begin 

         
          if (init_rst_i ) begin

            trn_tsof_n        <= 1'b1;
            trn_teof_n        <= 1'b1;
            trn_tsrc_rdy_n    <= 1'b1;
            trn_tsrc_dsc_n    <= 1'b1;
            trn_td            <= 64'b0;
            //trn_trem_n        <= 8'b0;
            trn_trem_n        <= 1'b1;
            
            fifo_tx_data_rd_en <= 1'b0;
            payload_valid <= 1'b0;
            trn_trem_en <= 1'b0;
   
            cur_mwr_dw_count  <= 10'b0;
  
            compl_done_o      <= 1'b0;
            mwr_done_o        <= 1'b0;

            mrd_done          <= 1'b0;
  
            cur_wr_count      <= 16'b0;
            cur_rd_count      <= 16'b1;

            mwr_len_byte      <= 13'b0;
            mrd_len_byte      <= 13'b0;

            pmwr_addr         <= 32'b0;
            pmrd_addr         <= 32'b0;

            rmwr_count        <= 16'b0;
            rmrd_count        <= 16'b0;

            serv_mwr          <= 1'b1;
            serv_mrd          <= 1'b1;

            tmwr_wrr_cnt      <= 8'h00;
            tmrd_wrr_cnt      <= 8'h00;

            bmd_64_tx_state   <= `BMD_64_TX_RST_STATE;

          end

          mwr_len_byte        <= 4 * mwr_len_i[10:0];      //表示一个TLP包含多少字节，这个参数在地址偏移中要使用
          mrd_len_byte        <= 4 * mrd_len_i[10:0];
          rmwr_count          <= mwr_count_i[15:0];
          rmrd_count          <= mrd_count_i[15:0];

          case ( bmd_64_tx_state ) 

            `BMD_64_TX_RST_STATE : begin

              compl_done_o       <= 1'b0;

              // PIO read completions always get highest priority

              if (req_compl_q && 
                  !compl_done_o &&
                  !trn_tdst_rdy_n &&
                  trn_tdst_dsc_n) begin

                trn_tsof_n       <= 1'b0;
                trn_teof_n       <= 1'b1;
                trn_tsrc_rdy_n   <= 1'b0;
                trn_td           <= { {1'b0}, 
                                      `BMD_64_CPLD_FMT_TYPE, 
                                      {1'b0}, 
                                      req_tc_i, 
                                      {4'b0}, 
                                      req_td_i, 
                                      req_ep_i, 
                                      req_attr_i, 
                                      {2'b0}, 
                                      req_len_i,
                                      completer_id_i,     //完成包ID  [15:0]
                                      {3'b0},  
                                      {1'b0},
                                      //req_tag_i,
                                      byte_count
                                      //{8'h0F}
                                       };       // [11:0]
                trn_trem_n        <= 8'b0;
                //trn_trem_n        <= 1'b0;

                bmd_64_tx_state   <= `BMD_64_TX_CPLD_QW1;
              end
              //DMA写操作
              else if (mwr_start_i &&                //mwr_start_i为PC机发来的DMA写启动信号
                           !mwr_done_o &&           //mwr_done_o为写DMA完成信号，一旦为1，表示完成，不再继续
                           serv_mwr &&
                           !trn_tdst_rdy_n &&       //trn_tdst_rdy_n为IP准备好的信号
                           trn_tdst_dsc_n && 
                           cfg_bm_en)            //cfg_bm_en=cfg_command[2]，表示总线主控只能，配置命令，来自配置空间标头的命令寄存器        
                begin             
                	trn_tsof_n       <= 1'b0;
                	trn_teof_n       <= 1'b1;
                	trn_tsrc_rdy_n   <= 1'b0;        //发送源准备信号，带后缀n表示低有效
                	//fifo_tx_data_rd_en <= 1'b0;      //fifo读不使能，
                	fifo_tx_data_rd_en <= 1'b1;        //通过时序分析，要提前两个时钟
                	trn_td           <= {          
                			{1'b0}, 
                			{mwr_64b_en_i ? 
                			 `BMD_64_MWR64_FMT_TYPE :  
                			 `BMD_64_MWR_FMT_TYPE}, 
                			{1'b0},      //校验位R置为0
                			mwr_tlp_tc_i,  //TC，来源于PC发送过来DMA写请求
                			{4'b0},       //4bit校验位
                			1'b0,          //TD
                			1'b0,          //EP
                			{mwr_relaxed_order_i, mwr_nosnoop_i}, // 2'b00,attr，PC机发送过来的设备参数 
                			{2'b0},         //2bit校验位
                			mwr_len_i[9:0],   //DMA写请求的数据长度，PC机发来的请求    SIZE
                			{completer_id_i[15:3], mwr_func_num},     //这一块不大懂
                			cfg_ext_tag_en_i ? cur_wr_count[7:0] : {3'b0, cur_wr_count[4:0]},     //如果为1DW之内，Last be全为0
                			(mwr_len_i[9:0] == 1'b1) ? 4'b0 : mwr_lbe_i,   //如果长度为1DW，那么第一个双字全有效，而Last be为0，mwr_lbe_i
                			mwr_fbe_i};    //当长度大于1DW时，mwr_fbe_i全为1，小于1DW时，按照字节使能，上一层文件直接置为F，表示至少1个DW
                	//trn_trem_n        <= 8'h00;      //全为0，取反后为FF，表示全使能    //有问题，传到axi_trn_tx时变为1bit
                	trn_trem_n        <= 1'b0;          //trn_trem_n为0表示tkeep为FF，为1表示tkeep为0F
                	trn_trem_en       <= 1'b1;       //额外添加，用来表示tkeep为FF还是0F
                	cur_mwr_dw_count  <= mwr_len_i[9:0];  //数据载荷的个数  SIZE              
                	// Weighted Round Robin
                	if (mwr_start_i && !mwr_done_o && (tmwr_wrr_cnt != mwr_wrr_cnt_i))    //暂时未知
                		begin                                             //mwr_wrr_cnt_i来源于寄存器模块
                		  serv_mwr        <= 1'b1;
                		  serv_mrd        <= 1'b0;            //开启了DMA写，并且还没完成，那么继续DMA写                 
                		  tmwr_wrr_cnt    <= tmwr_wrr_cnt + 1'b1;
                		end 
                	else if (mrd_start_i && !mrd_done)    
                		begin
                	  	serv_mwr        <= 1'b0;
                	  	serv_mrd        <= 1'b1;
                	  	tmwr_wrr_cnt    <= 8'h00;
                		end 
                	else 
                		begin
                		  serv_mwr        <= 1'b0;
                		  serv_mrd        <= 1'b0;
                		  tmwr_wrr_cnt    <= 8'h00;
                		end               
                	if (mwr_64b_en_i)
				  					bmd_64_tx_state   <= `BMD_64_TX_MWR64_QW1;
                	else
				 					 	bmd_64_tx_state   <= `BMD_64_TX_MWR_QW1;                
              	end                 
								//DMA读操作，FPGA向PC机发送读TLP报，请求数据
               else if (mrd_start_i &&           //mwr_start_i=wr_d_i[16]为PC机发来的DMA读启动信号，为控制状态寄存器
                           !mrd_done &&          //mrd_done为DMA读完成信号
                           serv_mrd &&
                           !trn_tdst_rdy_n &&
                           trn_tdst_dsc_n && 
                           cfg_bm_en) 
               	 begin
             
                	 trn_tsof_n       <= 1'b0;
                	 trn_teof_n       <= 1'b1;
                	 trn_tsrc_rdy_n   <= 1'b0;
                	 trn_td           <= { {1'b0}, 
                	                       {mrd_64b_en_i ? 
                	                        `BMD_64_MRD64_FMT_TYPE : 
                	                        `BMD_64_MRD_FMT_TYPE}, 
                	                       {1'b0}, 
                	                       mrd_tlp_tc_i, 
                	                       {4'b0}, 
                	                       1'b0, 
                	                       1'b0, 
                	                       {mrd_relaxed_order_i, mrd_nosnoop_i}, // 2'b00, 
                	                       {2'b0}, 
                	                       mrd_len_i[9:0],             //DMA读请求的数据长度，PC机发来的请求
                	                       {completer_id_i[15:3], mrd_func_num}, 
                	                       cfg_ext_tag_en_i ? cur_rd_count[7:0] : {3'b0, cur_rd_count[4:0]},
                	                       (mrd_len_i[9:0] == 1'b1) ? 4'b0 : mrd_lbe_i,
                	                       mrd_fbe_i};
                	 //trn_trem_n        <= 8'b0;
									 trn_trem_n        <= 1'b0;
									 trn_trem_en       <= 1'b1;
                	 // Weighted Round Robin
                	 if (mrd_start_i && !mrd_done && (tmrd_wrr_cnt != mrd_wrr_cnt_i)) 
                	 	begin
                	 	  serv_mrd        <= 1'b1;
                	 	  serv_mwr        <= 1'b0;
                	 	  tmrd_wrr_cnt    <= tmrd_wrr_cnt + 1'b1;
                	 	end 
                	 else if (mwr_start_i && !mwr_done_o) 
                	 	begin
                	 	  serv_mrd        <= 1'b0;
                	 	  serv_mwr        <= 1'b1;
                	 	  tmrd_wrr_cnt    <= 8'h00;
                	 	end
                	 else 
                	 	begin
                	   	serv_mrd        <= 1'b0;
                	   	serv_mwr        <= 1'b0;
                	   	tmrd_wrr_cnt    <= 8'h00;
                	 	end
                	 bmd_64_tx_state   <= `BMD_64_TX_MRD_QW1;              
              	 end 
              else  
              	begin
              	  if(!trn_tdst_rdy_n) 
              	  	begin             	  	
              	  	  trn_tsof_n        <= 1'b1;
              	  	  trn_teof_n        <= 1'b1;
              	  	  trn_tsrc_rdy_n    <= 1'b1;
              	  	  trn_tsrc_dsc_n    <= 1'b1;
              	  	  trn_td            <= 64'b0;
              	  	  trn_trem_n        <= 8'b0;
              	  	
              	  	  serv_mwr          <= ~serv_mwr;
              	  	  serv_mrd          <= ~serv_mrd;              	
              			end 
                	bmd_64_tx_state   <= `BMD_64_TX_RST_STATE;
                	fifo_tx_data_rd_en <= 1'b0;         //一直处于初始状态，也要讲读拉低
              	end

            end

            `BMD_64_TX_CPLD_QW1 : begin

              if ((!trn_tdst_rdy_n) && (trn_tdst_dsc_n)) begin

                trn_tsof_n       <= 1'b1;
                trn_teof_n       <= 1'b0;
                trn_tsrc_rdy_n   <= 1'b0;
                trn_td           <= { req_rid_i,              //请求者ID  [15:0] 
                                      req_tag_i,              //请求标记
                                      {1'b0},
                                      //{16'hfddf},
                                      //{2'b11},
                                      lower_addr,              //地址
                                      rd_data_i };             //数据
                trn_trem_n       <= 8'h00;
                compl_done_o     <= 1'b1;

                bmd_64_tx_state  <= `BMD_64_TX_CPLD_WIT;

              end else if (!trn_tdst_dsc_n) begin

                trn_tsrc_dsc_n   <= 1'b0;

                bmd_64_tx_state  <= `BMD_64_TX_CPLD_WIT;

              end else
                bmd_64_tx_state  <= `BMD_64_TX_CPLD_QW1;

            end

            `BMD_64_TX_CPLD_WIT : begin

              if ( (!trn_tdst_rdy_n) || (!trn_tdst_dsc_n) ) begin

                trn_tsof_n       <= 1'b1;
                trn_teof_n       <= 1'b1;
                trn_tsrc_rdy_n   <= 1'b1;
                trn_tsrc_dsc_n   <= 1'b1;

                bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;

              end else
                bmd_64_tx_state  <= `BMD_64_TX_CPLD_WIT;

            end

            `BMD_64_TX_MWR_QW1 :             //DMA写操作的第二个状态，开始发送TLP包的第二部分，含数据和地址
            begin
              if ((!trn_tdst_rdy_n) && (trn_tdst_dsc_n))    //trn_tdst_dsc_n=1表示发送源还要继续，为0表示不继续
              	begin
                	trn_tsof_n       <= 1'b1;
                	//fifo_tx_data_rd_en <= 1'b1;
                	trn_tsrc_rdy_n   <= 1'b0;             //根据已经发送的TLP包个数，计算PC端写入的起始地址tmwr_addr
                	if (cur_wr_count == 0)                //根据计算的地址发送第二个DW，然后进入写一个状态BMD_64_TX_MWR_QWN
                	  tmwr_addr       = mwr_addr;   //第一个包执行这句，阻塞赋值，立即生效，下面的非阻塞赋值可以得到这个值         
                	else                            //mwr_addr为PC发送的包含地址的TLP包，也就是PC给我们地址，让我们往这个地址仍数据
                	  tmwr_addr       = pmwr_addr + mwr_len_byte;  //剩下的包执行这句  
                	//trn_td           <= {{tmwr_addr[31:2], 2'b00}, 32'h0520_1314};  //2'b00为校验位R，mwr_data_i_sw为用户端想要发送的数据
                	trn_td           <= {{tmwr_addr[31:2], 2'b00}, mwr_data_i_sw};
                	pmwr_addr        <= tmwr_addr;    //打一拍，后面有用           	
                	cur_wr_count <= cur_wr_count + 1'b1;   //开始计数，已经发送的TLP包个数             	
                	if (cur_mwr_dw_count == 1'h1)     //cur_mwr_dw_count表示发送数据的个数，单位为DW，
                		begin               	           //为1时，表示只发送一个DW，发送一次就发完了，然后进入复位状态
                	  	trn_teof_n       <= 1'b0;      //表示TLP包结束了
                	  	fifo_tx_data_rd_en <= 1'b0;    //如果只发送一个DW的数据，FIFO不出数据，也就是不发数据，浪费了一个DW
                	  	cur_mwr_dw_count <= cur_mwr_dw_count - 1'h1;  //发送完毕，将个数清为0 
                	  	//trn_trem_n       <= 8'h00; 
                	  	trn_trem_n       <= 1'b0;
                	  	trn_trem_en       <= 1'b1;              	  	
                	  	if (cur_wr_count == (rmwr_count - 1'b1))    //rmwr_count表示预设发送的TLP个数，由PC发来
                	  		begin               	  	                //这里判断已发送TLP包个数是否等于预定的个数
                	  	  	cur_wr_count <= 0;                    //按照要求发完了，置0
                	  	  	mwr_done_o   <= 1'b1;                 //表示DMA写完成了             	  	
                	  		end               	  	
                	  	bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;              	
                		end 
                	else               //如果数据负载的长度大于1DW，则进入下一状态继续发送数据
                		begin                	
                	  	fifo_tx_data_rd_en <= 1'b1;    //FIFO读使能，下一个时钟出数据
                	  	cur_mwr_dw_count <= cur_mwr_dw_count - 1'h1;    //这里减1，表示已经发送了1个DW，
                	  	//trn_trem_n       <= 8'hFF;                    //用以表示trn_td的字节使能
                	  	trn_trem_n       <= 1'b0;
                	  	trn_trem_en       <= 1'b1;
                	  	bmd_64_tx_state  <= `BMD_64_TX_MWR_QWN;               	
                		end
              	end 
              else if (!trn_tdst_dsc_n)      //trn_tdst_dsc_n一直为1
              	begin
              	  bmd_64_tx_state    <= `BMD_64_TX_RST_STATE;
              	  trn_tsrc_dsc_n     <= 1'b0;
              	  fifo_tx_data_rd_en <= 1'b0;
              	end 
              else
                begin
                	bmd_64_tx_state    <= `BMD_64_TX_MWR_QW1;  
                	fifo_tx_data_rd_en <= 1'b0;                //如果trn_tdst_rdy_n为高，就会在这个状态一直循环，所以
                end                                          //读使能要拉低
            end

            `BMD_64_TX_MWR64_QW1 : begin

              if ((!trn_tdst_rdy_n) && (trn_tdst_dsc_n)) begin

                trn_tsof_n       <= 1'b1;
                trn_tsrc_rdy_n   <= 1'b0;
                if (cur_wr_count == 0)
                  tmwr_addr       = mwr_addr;
                else 
                  tmwr_addr       = {pmwr_addr[31:24], pmwr_addr[23:0] + mwr_len_byte};
                trn_td           <= {{24'b0},mwr_up_addr_i,tmwr_addr[31:2],{2'b0}};
                pmwr_addr        <= tmwr_addr;

                cur_wr_count <= cur_wr_count + 1'b1;

                bmd_64_tx_state  <= `BMD_64_TX_MWR_QWN;

              end else if (!trn_tdst_dsc_n) begin

                bmd_64_tx_state    <= `BMD_64_TX_RST_STATE;
                trn_tsrc_dsc_n     <= 1'b0;

              end else
                bmd_64_tx_state    <= `BMD_64_TX_MWR64_QW1;

            end

             `BMD_64_TX_MWR_QWN : begin                 					     //进入这个状态后，判断一个TLP包的数据长度是多少，    														
                                                                 //如果是1，则发送完下一个DW后，进入复位状态              
              if ((!trn_tdst_rdy_n) && (trn_tdst_dsc_n)) 
              	begin                                                                   
              	  trn_tsrc_rdy_n   <= 1'b0;                        
              	  if (cur_mwr_dw_count == 1'h1)     //cur_mwr_dw_count还有多少DW没有发完,如果还剩下一个DW没发
              	   	begin     
              	   	 	//trn_td           <= {mwr_data_i_sw, 32'hd0_da_d0_da};   //这里发的固定的数
              	   	 	//trn_td           <= {32'h1213_1415, 32'hd0_da_d0_da};
              	   	 	if(fifo_tx_data_valid == 1'b1)                //一般来说，不会让PC机设置的DW个数进入这个环节
                  			begin
                  				trn_td <= fifo_tx_data;
                  				payload_valid  <=1'b1;
                  			end
                  		else
                  			begin
                  				trn_td <= 64'd0;  
                  				payload_valid  <=1'b0;
                  			end           	   	 	
              	   	 	trn_trem_n       <= 8'h0F;      //表示高32位有效，低32位无效
              	   	 	trn_trem_n       <= 1'b1;
              	   	 	trn_trem_en       <= 1'b0;
              	   	 	trn_teof_n       <= 1'b0;              	   	 	
              	   	 	fifo_tx_data_rd_en <= 1'b0;      //进入这里，一个TLP的传输结束，FIFO不出数据
              	   	 	cur_mwr_dw_count <= cur_mwr_dw_count - 1'h1; 
              	   	 	bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;               	
              	  		if (cur_wr_count == rmwr_count)  
              	   			begin                      	
              	   			  cur_wr_count <= 0; 
              	   			  mwr_done_o   <= 1'b1;              	
              	   			end 
              	   		/*else      //一般来说，一次DMA传输会传送多个TLP，来保证效率，也可以达到一次DMA传输的数据量
                  			begin
                  				cur_wr_count <= cur_wr_count + 1'b1;      //没发送一个TLP，累加一次
                  				mwr_done_o   <= 1'b0;
                  			end*/
              			end 
                	else if (cur_mwr_dw_count == 2'h2)       //如果是2，则下一个DW会包含两个数据，发送完后，
                  	begin																				//进入复位状态
                  		//trn_td           <= {mwr_data_i_sw, mwr_data_i_sw};
                  		if(fifo_tx_data_valid == 1'b1)
                  			begin
                  				trn_td <= fifo_tx_data;
                  				payload_valid  <=1'b1;
                  			end
                  		else
                  			begin
                  				trn_td <= 64'd0; 
                  				payload_valid  <=1'b0;
                  			end   
                  		//trn_trem_n       <= 8'h00;
                  		trn_trem_n       <= 1'b0;
                  		trn_trem_en       <= 1'b1;
                  		trn_teof_n       <= 1'b0;               //表示发送结束
                  		fifo_tx_data_rd_en <= 1'b0;             //进入这里，一个TLP的传输结束，FIFO不出数据
                  		cur_mwr_dw_count <= cur_mwr_dw_count - 2'h2;         //如果当前发送的数据长度大于2，则一直发送数据，
                  		bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;         //直到余下的数据长度小于2，然后进入上述环节，
                  		if (cur_wr_count == rmwr_count)             //继续发完剩下的数据，回到复位状态
                  		  begin //判断发送TLP的个数是否与预定的相等
                  		  	cur_wr_count <= 0;                   //在进入到复位之前，会判断，已经发送的TLP个数是否和
                  		  	mwr_done_o   <= 1'b1;              //预定的相等，如果相等，就会返回信号mwr_done_o                	
                  			end
                  		/*else      //一般来说，一次DMA传输会传送多个TLP，来保证效率，也可以达到一次DMA传输的数据量
                  			begin
                  				cur_wr_count <= cur_wr_count + 1'b1;      //没发送一个TLP，累加一次
                  				mwr_done_o   <= 1'b0;   //一次DMA还没完成
                  			end*/
                  	end                                       //但是，当每个TLP的数据长度大于2时，那么发向PC端的地址
                  else                                        //由谁控制累加呢？这里发送引擎的DMA是有问题的，DMA发送的
                  	begin                                    //数据不是由内存读取出来的，而是一个始终不变的数
                  		//fifo_tx_data_rd_en <= 1'b1;  //实际上，为了传输效率，至少发送16个DW
                  		//trn_td           <= {mwr_data_i_sw, mwr_data_i_sw};   //发送了两个DW，
                  		//if((cur_mwr_dw_count == 3'd3) || (cur_mwr_dw_count == 3'h4))
                  		if((cur_mwr_dw_count == 3'd5) || (cur_mwr_dw_count == 3'd3) || (cur_mwr_dw_count == 3'h4))
                  			fifo_tx_data_rd_en <= 1'b0;
                  		else
                  			fifo_tx_data_rd_en <= 1'b1;
                  		if(fifo_tx_data_valid == 1'b1)
                  			trn_td <= fifo_tx_data;
                  		else
                  			trn_td <= fifo_tx_data;    //取fifo_tx_data上一个时钟的值
                  			//trn_td <= 64'd0;
                  		//trn_trem_n       <= 8'hFF;               //置0，表示全部都有效
                  		trn_trem_n       <= 1'b0;
                  		trn_trem_en       <= 1'b1;
                  		payload_valid     <=1'b1;
                  		cur_mwr_dw_count <= cur_mwr_dw_count - 2'h2; //比如要发送5个DW，上面那个状态机已经发了1个DW,还剩4个
                  		bmd_64_tx_state  <= `BMD_64_TX_MWR_QWN;    //第一次进入这里后，发送2个DW，还剩2个DW，  //进入上面的if语句发送剩下的2个DW
               			end																					 
              	end 
              else if (!trn_tdst_dsc_n) 
              	begin
                	bmd_64_tx_state    <= `BMD_64_TX_RST_STATE;
                	trn_tsrc_dsc_n     <= 1'b0;
                	fifo_tx_data_rd_en <= 1'b0;
                end 
              else
                begin
                	bmd_64_tx_state    <= `BMD_64_TX_MWR_QWN;
                	fifo_tx_data_rd_en <= 1'b0;
                end
            end

            `BMD_64_TX_MRD_QW1 : 
            	begin
            	
            	  if ((!trn_tdst_rdy_n) && (trn_tdst_dsc_n)) 
            	  	begin       	
            	  	  trn_tsof_n       <= 1'b1;
            	  	  trn_teof_n       <= 1'b0;
            	  	  trn_tsrc_rdy_n   <= 1'b0;
            	  	  if (cur_rd_count == 1)        //cur_rd_count初始值为1
            	  	    tmrd_addr       = mrd_addr;   //第一个TLP包执行
            	  	  else 
            	  	    tmrd_addr       = {pmrd_addr[31:24], pmrd_addr[23:0] + mrd_len_byte};   //剩下TLP包执行
            	  	  if (mrd_64b_en_i)        //如果使能了64bit存储器读
            	  	  	begin
            	  	  	  trn_td         <= {{24'b0},{mrd_up_addr_i},{tmrd_addr[31:2],2'b0}};
            	  	  	  trn_trem_n     <= 8'h00;
            	  	  	end 
            	  	  else 
            	  	  	begin
            	  	  	  //trn_td         <= {{tmrd_addr[31:2], 2'b00}, 32'hd0_da_d0_da};
            	  	  	  //trn_trem_n     <= 8'h0F;
            	  	  	  trn_td         <= {{tmrd_addr[31:2], 2'b00}, 32'h12_34_56_78}; 
            	  	  	  trn_trem_n     <= 1'b1;      //keep=8'h0F
            						trn_trem_en    <= 1'b0;                               
            	  	  	end
            	  	  pmrd_addr        <= tmrd_addr;          	
            	  	  if (cur_rd_count == rmrd_count) 
            	  	  	begin            	
            	  	  	  cur_rd_count   <= 0; 
            	  	  	  mrd_done       <= 1'b1;            	
            	  	  	end
            	  	  else 
            	  	    cur_rd_count <= cur_rd_count + 1'b1;           	
            	  	  bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;   //回到初始状态，再进行下一个请求         	
            	  	end 
            	  		else if (!trn_tdst_dsc_n) 
            	  			begin            	  	
            	  	  		bmd_64_tx_state  <= `BMD_64_TX_RST_STATE;
            	  	  		trn_tsrc_dsc_n   <= 1'b0;            	  	
            	  	end else
            	  	  bmd_64_tx_state  <= `BMD_64_TX_MRD_QW1;
            	  	
            	end

          endcase

        end

    end


//检验从DDR3读出来的数据是否正确
	reg [63:0]trn_td_r1;
	reg [63:0]trn_td_r2; 
	reg payload_valid_r1;
	reg payload_valid_r2;
	
	always @(posedge clk )
	begin
		if(!rst_n)
			begin	
				trn_td_r1 <= 64'd0;
				trn_td_r2 <= 64'd0;
			end
		else if(payload_valid)
			begin
				trn_td_r1 <= trn_td;
				trn_td_r2 <= trn_td_r1;
		  end
		else
			begin
				trn_td_r1 <= trn_td_r1;
				trn_td_r2 <= trn_td_r2;
			end
	end
	always @(posedge clk )
	begin
		payload_valid_r1 <= payload_valid; 
		payload_valid_r2 <= payload_valid_r1;
	end
	reg trn_td_error;
	always @(posedge clk )
	begin
		if(!rst_n)
			trn_td_error <= 1'b0;	
		else if(payload_valid_r2 & payload_valid )		
	    begin
	  		if( ({trn_td[63:48]} - {trn_td_r2[63:48]} == 2'd1) || ({trn_td[63:48]} - {trn_td_r2[63:48]} == 3'd5))	  		  
					trn_td_error <= 1'b0;                                              
				else       
					trn_td_error <= 1'b1;
			end
		else
			trn_td_error <= 1'b0;
	end	


	ILA_PCIE_TOP 
		BMD_64_TX_ENGINE_i (
	.clk(clk), // input wire clk


	.probe0({
					trn_td[63:0],
	        //rd_addr_o[6:0],   	          
	        mwr_addr[31:0],
	        //lower_addr[6:0],
	        
	        cur_wr_count[15:0],
	        rmwr_count[15:0]        	               
	
	}), // input wire [127:0]  probe0  
	.probe1({
    			trn_tsof_n,    
	        trn_teof_n,
	        rd_be_o[3:0],    
	        trn_tsrc_rdy_n,
	        trn_tsrc_dsc_n,
	        trn_tdst_rdy_n,
	        trn_tdst_dsc_n,
	        req_compl_i,
				  compl_done_o,
				  trn_trem_n[0:0],
				  fifo_tx_data_valid,
				  fifo_tx_data_rd_en,
				  trn_trem_en, 
				  mwr_start_i,
				  mwr_done_o,
				  cfg_bm_en,
				  cur_mwr_dw_count[9:0],
	        bmd_64_tx_state[7:0],
	        mrd_start_i,
	        mrd_len_i[9:0],
				  mrd_count_i[15:0],
				  lower_addr[6:0],     
				  trn_td_error
				  	
				  				  
	}) // input wire [79:0]  probe1
);




endmodule // BMD_64_TX_ENGINE

